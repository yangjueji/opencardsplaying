package{	import flash.events.*;	import flash.net.*;	import flash.text.*;	import flash.system.*;	public class CWEnterInTask{		private var ip:String;		private var port:int;		private var userName:String;		private var socket:Socket;		private var debugInfo:TextField;		private var success:Boolean;		private var gotData:Boolean;		private var roomIndex:int;				public function CWEnterInTask(ip:String,port:int,userName:String){			this.socket = new Socket();			this.ip = ip;			this.port = port;			this.userName = userName;			this.debugInfo = null;			this.gotData = false;			socket.addEventListener(Event.CONNECT,connectHandler);			socket.addEventListener(Event.CLOSE, closeHandler);			socket.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			socket.addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);		}				public function setDebugInfo(_debugInfo:TextField):void{			debugInfo = _debugInfo;		}				public function startTask():void{			socket.connect(ip,port);		}				public function isEnterSuccessed():Boolean{			while(!gotData){				;			}			return success;		}				public function getRoomIndex():int{			if(gotData&&success){				return this.roomIndex;			}			return -1;		}				private function connectHandler(event:Event):void{			showDebugInfo(event.toString());			socket.writeUTF("enter in\n");			socket.writeUTF(userName + "\n");		}				private function socketDataHandler(event:ProgressEvent):void{			showDebugInfo(event.toString());			var bufferString:String = socket.readUTFBytes(socket.bytesAvailable);			roomIndex = socket.readInt();			showDebugInfo(bufferString);			gotData = true;			if (bufferString=="success"){				success = true;			}			else{				success = false;			}			socket.close();		}				private function ioErrorHandler(event:IOErrorEvent):void {			showDebugInfo(event.toString());			gotData = true;			success = false;			socket.close();    	}    	private function securityErrorHandler(event:SecurityErrorEvent):void {			showDebugInfo(event.toString());			gotData = true;			success = false;			socket.close();    	}				private function closeHandler(event:Event):void {			showDebugInfo(event.toString());			socket.close();    	}				private function showDebugInfo(info:String):void {			if(debugInfo!=null){				debugInfo.text = info;			}			trace(info);		}	}}